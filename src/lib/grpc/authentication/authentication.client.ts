// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "authentication/authentication.proto" (package "authentication", syntax proto3)
// tslint:disable
//
//-- ./proto/authentication.proto
//
//
/// Authentication Service definitions
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { AuthenticationService } from "./authentication";
import type { LogoutResponse } from "./authentication";
import type { LogoutRequest } from "./authentication";
import type { RegisterRequest } from "./authentication";
import type { ResetPasswordResponse } from "./authentication";
import type { ResetPasswordRequest } from "./authentication";
import type { UpdatePasswordRequest } from "./authentication";
import type { RefreshRequest } from "./authentication";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { TokenResponse } from "./authentication";
import type { LoginRequest } from "./authentication";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Define the Authentication service definition (endpoints).
 *
 * @generated from protobuf service authentication.AuthenticationService
 */
export interface IAuthenticationServiceClient {
    /**
     * @generated from protobuf rpc: Login(authentication.LoginRequest) returns (authentication.TokenResponse);
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, TokenResponse>;
    /**
     * @generated from protobuf rpc: Refresh(authentication.RefreshRequest) returns (authentication.TokenResponse);
     */
    refresh(input: RefreshRequest, options?: RpcOptions): UnaryCall<RefreshRequest, TokenResponse>;
    /**
     * @generated from protobuf rpc: UpdatePassword(authentication.UpdatePasswordRequest) returns (authentication.TokenResponse);
     */
    updatePassword(input: UpdatePasswordRequest, options?: RpcOptions): UnaryCall<UpdatePasswordRequest, TokenResponse>;
    /**
     * @generated from protobuf rpc: ResetPassword(authentication.ResetPasswordRequest) returns (authentication.ResetPasswordResponse);
     */
    resetPassword(input: ResetPasswordRequest, options?: RpcOptions): UnaryCall<ResetPasswordRequest, ResetPasswordResponse>;
    /**
     * @generated from protobuf rpc: Register(authentication.RegisterRequest) returns (authentication.TokenResponse);
     */
    register(input: RegisterRequest, options?: RpcOptions): UnaryCall<RegisterRequest, TokenResponse>;
    /**
     * @generated from protobuf rpc: Logout(authentication.LogoutRequest) returns (authentication.LogoutResponse);
     */
    logout(input: LogoutRequest, options?: RpcOptions): UnaryCall<LogoutRequest, LogoutResponse>;
}
/**
 * Define the Authentication service definition (endpoints).
 *
 * @generated from protobuf service authentication.AuthenticationService
 */
export class AuthenticationServiceClient implements IAuthenticationServiceClient, ServiceInfo {
    typeName = AuthenticationService.typeName;
    methods = AuthenticationService.methods;
    options = AuthenticationService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Login(authentication.LoginRequest) returns (authentication.TokenResponse);
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, TokenResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<LoginRequest, TokenResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Refresh(authentication.RefreshRequest) returns (authentication.TokenResponse);
     */
    refresh(input: RefreshRequest, options?: RpcOptions): UnaryCall<RefreshRequest, TokenResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<RefreshRequest, TokenResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdatePassword(authentication.UpdatePasswordRequest) returns (authentication.TokenResponse);
     */
    updatePassword(input: UpdatePasswordRequest, options?: RpcOptions): UnaryCall<UpdatePasswordRequest, TokenResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdatePasswordRequest, TokenResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ResetPassword(authentication.ResetPasswordRequest) returns (authentication.ResetPasswordResponse);
     */
    resetPassword(input: ResetPasswordRequest, options?: RpcOptions): UnaryCall<ResetPasswordRequest, ResetPasswordResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<ResetPasswordRequest, ResetPasswordResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Register(authentication.RegisterRequest) returns (authentication.TokenResponse);
     */
    register(input: RegisterRequest, options?: RpcOptions): UnaryCall<RegisterRequest, TokenResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<RegisterRequest, TokenResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Logout(authentication.LogoutRequest) returns (authentication.LogoutResponse);
     */
    logout(input: LogoutRequest, options?: RpcOptions): UnaryCall<LogoutRequest, LogoutResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<LogoutRequest, LogoutResponse>("unary", this._transport, method, opt, input);
    }
}
