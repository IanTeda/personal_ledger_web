// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "authentication/sessions.proto" (package "authentication", syntax proto3)
// tslint:disable
//
//-- ./proto/sessions.proto
//
//
/// Authentication sessions service definitions file
//
import { Empty } from "./common";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * The request message containing the read session data.
 *
 * @generated from protobuf message authentication.SessionsReadRequest
 */
export interface SessionsReadRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * The request message containing the session index data.
 *
 * @generated from protobuf message authentication.SessionsIndexRequest
 */
export interface SessionsIndexRequest {
    /**
     * @generated from protobuf field: int64 limit = 1;
     */
    limit: bigint;
    /**
     * @generated from protobuf field: int64 offset = 2;
     */
    offset: bigint;
}
/**
 * The request message containing the revoke session data.
 *
 * @generated from protobuf message authentication.SessionsRevokeRequest
 */
export interface SessionsRevokeRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * The request message containing the revoke user session data.
 *
 * @generated from protobuf message authentication.SessionsRevokeUserRequest
 */
export interface SessionsRevokeUserRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
}
/**
 * The response message containing the revoke session data.
 *
 * @generated from protobuf message authentication.SessionsDeleteRequest
 */
export interface SessionsDeleteRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * The request message containing the delete session data.
 *
 * @generated from protobuf message authentication.SessionsDeleteUserRequest
 */
export interface SessionsDeleteUserRequest {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
}
/**
 * The response message containing the session data.
 *
 * @generated from protobuf message authentication.SessionsResponse
 */
export interface SessionsResponse {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string user_id = 2;
     */
    userId: string;
    /**
     * @generated from protobuf field: string refresh_token = 3;
     */
    refreshToken: string;
    /**
     * @generated from protobuf field: bool is_active = 4;
     */
    isActive: boolean;
    /**
     * @generated from protobuf field: string created_on = 5;
     */
    createdOn: string;
}
/**
 * The response message containing the session index data.
 *
 * @generated from protobuf message authentication.SessionsIndexResponse
 */
export interface SessionsIndexResponse {
    /**
     * @generated from protobuf field: repeated authentication.SessionsResponse sessions = 1;
     */
    sessions: SessionsResponse[];
}
/**
 * The response message containing the revoke session data.
 *
 * @generated from protobuf message authentication.SessionsRevokeResponse
 */
export interface SessionsRevokeResponse {
    /**
     * @generated from protobuf field: int64 rows_affected = 1;
     */
    rowsAffected: bigint;
}
/**
 * The response message containing the delete session data.
 *
 * @generated from protobuf message authentication.SessionsDeleteResponse
 */
export interface SessionsDeleteResponse {
    /**
     * @generated from protobuf field: int64 rows_affected = 1;
     */
    rowsAffected: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class SessionsReadRequest$Type extends MessageType<SessionsReadRequest> {
    constructor() {
        super("authentication.SessionsReadRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SessionsReadRequest>): SessionsReadRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<SessionsReadRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SessionsReadRequest): SessionsReadRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SessionsReadRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authentication.SessionsReadRequest
 */
export const SessionsReadRequest = new SessionsReadRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SessionsIndexRequest$Type extends MessageType<SessionsIndexRequest> {
    constructor() {
        super("authentication.SessionsIndexRequest", [
            { no: 1, name: "limit", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "offset", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SessionsIndexRequest>): SessionsIndexRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.limit = 0n;
        message.offset = 0n;
        if (value !== undefined)
            reflectionMergePartial<SessionsIndexRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SessionsIndexRequest): SessionsIndexRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 limit */ 1:
                    message.limit = reader.int64().toBigInt();
                    break;
                case /* int64 offset */ 2:
                    message.offset = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SessionsIndexRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 limit = 1; */
        if (message.limit !== 0n)
            writer.tag(1, WireType.Varint).int64(message.limit);
        /* int64 offset = 2; */
        if (message.offset !== 0n)
            writer.tag(2, WireType.Varint).int64(message.offset);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authentication.SessionsIndexRequest
 */
export const SessionsIndexRequest = new SessionsIndexRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SessionsRevokeRequest$Type extends MessageType<SessionsRevokeRequest> {
    constructor() {
        super("authentication.SessionsRevokeRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SessionsRevokeRequest>): SessionsRevokeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<SessionsRevokeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SessionsRevokeRequest): SessionsRevokeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SessionsRevokeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authentication.SessionsRevokeRequest
 */
export const SessionsRevokeRequest = new SessionsRevokeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SessionsRevokeUserRequest$Type extends MessageType<SessionsRevokeUserRequest> {
    constructor() {
        super("authentication.SessionsRevokeUserRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SessionsRevokeUserRequest>): SessionsRevokeUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<SessionsRevokeUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SessionsRevokeUserRequest): SessionsRevokeUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SessionsRevokeUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authentication.SessionsRevokeUserRequest
 */
export const SessionsRevokeUserRequest = new SessionsRevokeUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SessionsDeleteRequest$Type extends MessageType<SessionsDeleteRequest> {
    constructor() {
        super("authentication.SessionsDeleteRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SessionsDeleteRequest>): SessionsDeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<SessionsDeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SessionsDeleteRequest): SessionsDeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SessionsDeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authentication.SessionsDeleteRequest
 */
export const SessionsDeleteRequest = new SessionsDeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SessionsDeleteUserRequest$Type extends MessageType<SessionsDeleteUserRequest> {
    constructor() {
        super("authentication.SessionsDeleteUserRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SessionsDeleteUserRequest>): SessionsDeleteUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<SessionsDeleteUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SessionsDeleteUserRequest): SessionsDeleteUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SessionsDeleteUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authentication.SessionsDeleteUserRequest
 */
export const SessionsDeleteUserRequest = new SessionsDeleteUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SessionsResponse$Type extends MessageType<SessionsResponse> {
    constructor() {
        super("authentication.SessionsResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "refresh_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "is_active", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "created_on", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SessionsResponse>): SessionsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.userId = "";
        message.refreshToken = "";
        message.isActive = false;
        message.createdOn = "";
        if (value !== undefined)
            reflectionMergePartial<SessionsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SessionsResponse): SessionsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string user_id */ 2:
                    message.userId = reader.string();
                    break;
                case /* string refresh_token */ 3:
                    message.refreshToken = reader.string();
                    break;
                case /* bool is_active */ 4:
                    message.isActive = reader.bool();
                    break;
                case /* string created_on */ 5:
                    message.createdOn = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SessionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string user_id = 2; */
        if (message.userId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.userId);
        /* string refresh_token = 3; */
        if (message.refreshToken !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.refreshToken);
        /* bool is_active = 4; */
        if (message.isActive !== false)
            writer.tag(4, WireType.Varint).bool(message.isActive);
        /* string created_on = 5; */
        if (message.createdOn !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.createdOn);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authentication.SessionsResponse
 */
export const SessionsResponse = new SessionsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SessionsIndexResponse$Type extends MessageType<SessionsIndexResponse> {
    constructor() {
        super("authentication.SessionsIndexResponse", [
            { no: 1, name: "sessions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SessionsResponse }
        ]);
    }
    create(value?: PartialMessage<SessionsIndexResponse>): SessionsIndexResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sessions = [];
        if (value !== undefined)
            reflectionMergePartial<SessionsIndexResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SessionsIndexResponse): SessionsIndexResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated authentication.SessionsResponse sessions */ 1:
                    message.sessions.push(SessionsResponse.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SessionsIndexResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated authentication.SessionsResponse sessions = 1; */
        for (let i = 0; i < message.sessions.length; i++)
            SessionsResponse.internalBinaryWrite(message.sessions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authentication.SessionsIndexResponse
 */
export const SessionsIndexResponse = new SessionsIndexResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SessionsRevokeResponse$Type extends MessageType<SessionsRevokeResponse> {
    constructor() {
        super("authentication.SessionsRevokeResponse", [
            { no: 1, name: "rows_affected", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SessionsRevokeResponse>): SessionsRevokeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.rowsAffected = 0n;
        if (value !== undefined)
            reflectionMergePartial<SessionsRevokeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SessionsRevokeResponse): SessionsRevokeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 rows_affected */ 1:
                    message.rowsAffected = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SessionsRevokeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 rows_affected = 1; */
        if (message.rowsAffected !== 0n)
            writer.tag(1, WireType.Varint).int64(message.rowsAffected);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authentication.SessionsRevokeResponse
 */
export const SessionsRevokeResponse = new SessionsRevokeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SessionsDeleteResponse$Type extends MessageType<SessionsDeleteResponse> {
    constructor() {
        super("authentication.SessionsDeleteResponse", [
            { no: 1, name: "rows_affected", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SessionsDeleteResponse>): SessionsDeleteResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.rowsAffected = 0n;
        if (value !== undefined)
            reflectionMergePartial<SessionsDeleteResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SessionsDeleteResponse): SessionsDeleteResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 rows_affected */ 1:
                    message.rowsAffected = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SessionsDeleteResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 rows_affected = 1; */
        if (message.rowsAffected !== 0n)
            writer.tag(1, WireType.Varint).int64(message.rowsAffected);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authentication.SessionsDeleteResponse
 */
export const SessionsDeleteResponse = new SessionsDeleteResponse$Type();
/**
 * @generated ServiceType for protobuf service authentication.SessionsService
 */
export const SessionsService = new ServiceType("authentication.SessionsService", [
    { name: "Read", options: {}, I: SessionsReadRequest, O: SessionsResponse },
    { name: "Index", options: {}, I: SessionsIndexRequest, O: SessionsIndexResponse },
    { name: "Revoke", options: {}, I: SessionsRevokeRequest, O: SessionsRevokeResponse },
    { name: "RevokeUser", options: {}, I: SessionsRevokeUserRequest, O: SessionsRevokeResponse },
    { name: "RevokeAll", options: {}, I: Empty, O: SessionsRevokeResponse },
    { name: "Delete", options: {}, I: SessionsDeleteRequest, O: SessionsDeleteResponse },
    { name: "DeleteUser", options: {}, I: SessionsDeleteUserRequest, O: SessionsDeleteResponse },
    { name: "DeleteAll", options: {}, I: Empty, O: SessionsDeleteResponse }
]);
